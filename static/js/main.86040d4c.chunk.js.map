{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","country","description","temp","windspeed","humidity","error","App","state","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api","json","data","console","log","setState","Math","round","main","sys","wind","speed","weather","toUpperCase","slice","alert","window","location","reload","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PASeA,EAPF,kBACT,gCACI,kDACA,iECIOC,EAPF,SAAAC,GAAK,OACd,uBAAMC,SAAUD,EAAME,cAAtB,UACG,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,cAC1C,2DCaOC,EAhBC,SAAAN,GAAK,OACjB,sBAAKO,UAAU,YAAf,UACUP,EAAMQ,MACR,gCACA,2CAAcR,EAAMQ,KAApB,KAA4BR,EAAMS,WAClC,8CAAiBT,EAAMU,eACvB,8CAAiBV,EAAMW,KAAvB,gBACA,6CAAgBX,EAAMY,UAAtB,UACA,2CAAcZ,EAAMa,SAApB,UAGA,mBAAGN,UAAU,QAAb,SAAuBP,EAAMc,YCkE1BC,E,4MAxEbC,MAAQ,CACNL,KAAM,GACNH,KAAM,GACNC,QAAS,GACTG,UAAW,GACXF,YAAa,GACbG,SAAU,GACVC,MAAO,I,EAGTG,e,uCAAiB,WAAOC,GAAP,mBAAAC,EAAA,yDACfD,EAAEE,mBACEZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,OAFnB,iCAIKC,MAAM,qDAAD,OAAsDhB,EAAtD,yDAJV,cAIPiB,EAJO,gBAKMA,EAAIC,OALV,OAKPC,EALO,OAMbC,QAAQC,IAAIF,GACZ,IACA,EAAKG,SAAS,CACZnB,KAAMoB,KAAKC,MAAML,EAAKM,KAAKtB,MAC3BH,KAAMmB,EAAKvB,KACXK,QAASkB,EAAKO,IAAIzB,QAClBG,UAAWmB,KAAKC,MAAML,EAAKQ,KAAKC,OAChC1B,YAAaiB,EAAKU,QAAQ,GAAG3B,YAAY,GAAG4B,cAAgBX,EAAKU,QAAQ,GAAG3B,YAAY6B,MAAM,GAC9F1B,SAAUc,EAAKM,KAAKpB,SACpBC,MAAO,KAET,MAAOI,GACPsB,MAAM,2BACNC,OAAOC,SAASC,SAnBH,wBAsBb,EAAKb,SAAS,CAChBnB,KAAM,GACNH,KAAM,GACNC,QAAS,GACTG,UAAW,GACXF,YAAa,GACbG,SAAU,GACVC,MAAO,oBA7BQ,4C,6GAkCf,OACE,qBAAKP,UAAU,UAAf,SACE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,gBAAf,SACA,cAAC,EAAD,MAEA,sBAAKA,UAAU,gBAAf,UACA,cAAC,EAAD,CAAML,cAAe0C,KAAK3B,iBAC1B,cAAC,EAAD,CACEN,KAAMiC,KAAK5B,MAAML,KACjBH,KAAMoC,KAAK5B,MAAMR,KACjBC,QAASmC,KAAK5B,MAAMP,QACpBG,UAAWgC,KAAK5B,MAAMJ,UACtBF,YAAakC,KAAK5B,MAAMN,YACxBG,SAAU+B,KAAK5B,MAAMH,SACrBC,MAAO8B,KAAK5B,MAAMF,wB,GA/DhB+B,IAAMC,WCOTC,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.86040d4c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Info = () => (\r\n    <div>\r\n        <h2>Weather Forecast</h2>\r\n        <p>Check wheather in your city!</p>\r\n    </div>\r\n);\r\n\r\nexport default Info;","import React from 'react'\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.weatherMethod}>\r\n       <input type=\"text\" name=\"city\" placeholder=\"City name\" />\r\n        <button>Check the weather</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from 'react'\r\n\r\nconst Weather = props =>(\r\n    <div className=\"infoWeath\">\r\n            { props.city && \r\n            <div>\r\n            <p>Location: {props.city}, {props.country}</p>\r\n            <p>Description: {props.description}</p>\r\n            <p>Temperature: {props.temp}°С</p>\r\n            <p>Wind speed: {props.windspeed} m/s</p>\r\n            <p>Humidity: {props.humidity}%</p>\r\n            </div>\r\n            }\r\n            <p className=\"error\">{ props.error }</p>\r\n        </div>    \r\n    );\r\n\r\n\r\nexport default Weather;","import React from 'react';\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/weather';\n\nclass App extends React.Component {\n\n  state = {\n    temp: \"\",\n    city: \"\",\n    country: \"\",\n    windspeed: \"\",\n    description: \"\",\n    humidity: \"\",\n    error: \"\"\n  }\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    let city = e.target.elements.city.value;\n    if(city) {\n      const api = await fetch(`HTTPS://api.openweathermap.org/data/2.5/weather?q=${city}&appid=0ceeb6d2cd47c2a59d70272403971e35&units=metric`);\n      const data = await api.json();  \n      console.log(data)\n      try{\n      this.setState({\n        temp: Math.round(data.main.temp),\n        city: data.name,\n        country: data.sys.country,\n        windspeed: Math.round(data.wind.speed),\n        description: data.weather[0].description[0].toUpperCase() + data.weather[0].description.slice(1),\n        humidity: data.main.humidity,\n        error: \"\"\n      });\n    } catch (e) {\n      alert('Enter correct city name')\n      window.location.reload();\n    }\n    } else {\n      this.setState({\n    temp: \"\",\n    city: \"\",\n    country: \"\",\n    windspeed: \"\",\n    description: \"\",\n    humidity: \"\",\n    error: \"Enter city name\"\n      });\n    }\n  }\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm-5 info\">\n              <Info />\n              </div>\n              <div className=\"col-sm-7 form\">\n              <Form weatherMethod={this.gettingWeather} />\n              <Weather\n                temp={this.state.temp}\n                city={this.state.city}\n                country={this.state.country}\n                windspeed={this.state.windspeed}\n                description={this.state.description}\n                humidity={this.state.humidity}\n                error={this.state.error}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}